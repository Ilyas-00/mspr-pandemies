name: CI - Pandémies

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

# évite les exécutions concurrentes inutiles
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: Install + Pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (avec LFS)
        uses: actions/checkout@v4
        with:
          lfs: true  # important si ton .pkl est suivi en LFS

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: pytest -q

  docker-build:
    name: Docker build (API & App)
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (avec LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build des images SANS push (CI pur)
      - name: Build API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.api
          push: false
          tags: |
            ci-local/api:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build App image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.app
          push: false
          tags: |
            ci-local/app:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  e2e-compose:
    name: E2E smoke (compose up + curl)
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Compose up (detached)
        run: docker compose up -d

      - name: Wait for API (gateway US 8011)
        run: |
          for i in {1..40}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8011/docs || true)
            if [ "$STATUS" = "200" ]; then
              echo "API OK"
              exit 0
            fi
            echo "waiting API... ($i)"
            sleep 3
          done
          echo "API never became healthy"
          docker compose logs api || true
          exit 1

      - name: Call /ml/available_countries (if features exist)
        run: |
          curl -sS http://localhost:8011/ml/available_countries | head -c 300 || true

      - name: Ping Streamlit (direct app 8501)
        run: |
          for i in {1..40}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8501/ || true)
            if [ "$STATUS" = "200" ]; then
              echo "APP OK (8501)"
              exit 0
            fi
            echo "waiting APP 8501... ($i)"
            sleep 3
          done
          echo "APP on 8501 never became healthy"
          docker compose logs app || true
          exit 1


      - name: Show gateway headers (nginx)
        run: curl -I http://localhost:8011/ | tr -d '\r' | sed -n '1,10p'

      - name: Compose down
        if: always()
        run: docker compose down -v
